<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Mr Hyde]]></title>
  <link href="http://alexvicegrab.github.io/atom.xml" rel="self"/>
  <link href="http://alexvicegrab.github.io/"/>
  <updated>2014-04-22T22:45:01+02:00</updated>
  <id>http://alexvicegrab.github.io/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Object Oriented Matlab]]></title>
    <link href="http://alexvicegrab.github.io/blog/2014/04/22/object-oriented-matlab/"/>
    <updated>2014-04-22T23:28:59+02:00</updated>
    <id>http://alexvicegrab.github.io/blog/2014/04/22/object-oriented-matlab</id>
    <content type="html"><![CDATA[<h2>Time is <s>    no</s>     object</h2>

<p>I&rsquo;ve been wishing to dabble in Object Oriented Programming (OOP) for a while. Despite understanding the core concepts, however, the jargon and my limited knowledge of OOP-centered languages has kept me at bay. Only 2 problems really that can be solved thus:</p>

<ol>
<li>Jargon

<ul>
<li>If you can&rsquo;t beat them, <s>    join</s>     simplify them. If I can <strong>explain</strong> the jargon to someone else (you), it will stop being an issue</li>
</ul>
</li>
<li>Knowledge

<ul>
<li>While my knowledge of languages like Python, Ruby and Objective-C is at its infancy, I&rsquo;m rather familiar with Matlab. And Matlab has (mostly-ignored) Object Oriented capabilities</li>
</ul>
</li>
</ol>


<h2>To learn something well, <s>    teach</s>     build it</h2>

<p>To learn OOP in Matlab, I decided to build a scientific toolbox for analysing multimedia data, since some of my current projects require this.</p>

<p>&hellip;well, re-build. The toolbox existed before but used a rather messy set of procedural scripts and functions. If only I could <s>    steal</s>     acquire the knowledge&hellip; Thankfully, there is <a href="http://yagtom.googlecode.com/svn/trunk/html/objectOriented.html">one</a> or <a href="http://yagtom.googlecode.com/svn/trunk/html/objectOrientedAdvanced.html">two</a> excellent reference guides that are generally clearer than Matlab&rsquo;s own <a href="http://www.mathworks.nl/help/matlab/object-oriented-programming.html">documentation</a>.</p>

<p>I made a neat little <a href="https://github.com/alexvicegrab/visualAnalysis">Visual Analysis toolbox</a> (which remains <strong>work in progress</strong>) and learned a lot about:</p>

<ul>
<li>Packages</li>
<li>Classes</li>
<li>Properties</li>
<li>Methods</li>
<li>Objects</li>
<li>Inheritance</li>
<li>Dynamic Dispatch</li>
</ul>


<h2>I&rsquo;ve got a package for you!</h2>

<p>An optional thing to do when delving into OOP Matlab is to make a package. A package consists of a folder where all your classes will be stored. Let&rsquo;s try making one in Matlab.</p>

<blockquote><pre><code>&gt;&gt; mkdir +package
&gt;&gt; cd +package
</code></pre></blockquote>

<h2>Doing it with class</h2>

<p>Inside the package, we can start creating class files. Because our new class is excellent, let&rsquo;s call it <strong>superclass</strong>&hellip;</p>

<blockquote><pre><code>&gt;&gt; edit superclass.m
</code></pre></blockquote>

<p>Inside, we will need to define it, so it will look something like</p>

<blockquote><pre><code>classdef superclass
   % SUPERCLASS is an excellent class

   properties
   end

   methods
   end
end
</code></pre></blockquote>

<p>Right now our class is rather empty, let&rsquo;s fill &lsquo;er up.</p>

<h2>Properties, the proper way</h2>

<p>We can add some properties to our class. What&rsquo;s nice is that we can hide them from prying eyes and keyboards if needed. We will have a few different ones:</p>

<ol>
<li>Public:

<ul>
<li>Available to everyone to change inside and outside the class</li>
</ul>
</li>
<li>Protected:</li>
<li>Available to this class and any of its subclasses</li>
<li>Private:

<ul>
<li>Available only to this class</li>
</ul>
</li>
</ol>


<p>Let&rsquo;s go back to our class and make some properties, we can have a couple of property blocks:</p>

<blockquote><pre><code>[...]
   properties
      clothes
   end
   properties (SetAccess = 'protected')
      face
   end
   properties (SetAccess = 'private', GetAccess = 'private')
      heart
   end
   properties (Constant = true)
      MORTAL = true;
   end
[...]
</code></pre></blockquote>

<p>We are letting anyone look at and touch our <strong>clothes</strong>, they are <strong>public</strong> because they are not very important.</p>

<p>Our <strong>face</strong> is a bit more <strong>protected</strong>, so only our children (i.e. subclasses) can touch it, though in this case everyone can see it (GetAccess remains public).</p>

<p>Our <strong>heart</strong> has been broken so many times that we keep it <strong>private</strong>, never letting anyone see or touch it anymore (sniff&hellip;!).</p>

<p>Some other things about us are <strong>constant</strong> and can&rsquo;t be changed, like the fact that we are <strong>MORTAL</strong>.</p>

<h2>Crystal <s>    clear</s>     meth<s>    ods</s>    </h2>

<p>We will need a couple of methods in our class. One of these has to be a constructor. Again, we can make several method blocks.</p>

<blockquote><pre><code>[...]
   methods
   % This is the constructor
      function obj = superclass(clothes, face, heart)
         if(nargin == 3)
             obj.clothes = clothes;
             obj.face    = face;
             obj.heart   = heart;
         else
             warning('A superclass needs clothes, a face and a heart')
         end
      end
      function obj = program(obj)
         fprintf('Clack, clack, clack\n')
      end
   end
   methods (Access = 'private')
      function obj = sleep(obj)
         fprintf('ZzzzZ\n')
      end
   end
   methods (Static = true)
      function soul()
         fprintf('Some immortal soul will be reincarnated into the next instance\n')
      end
   end
[...]
</code></pre></blockquote>

<p>The constructor method makes an <strong>instance</strong> of our <em>superclass</em> class. It is a <strong>public</strong> method, since otherwise you&rsquo;d not be able to make an instance.</p>

<p>The instance method <strong>program</strong> is also <strong>public</strong>, as it&rsquo;s something that can be accessed (i.e. called) and requested by anyone (i.e. you can, in theory, ask me to program something).</p>

<p>The instance method <strong>sleep</strong> is <strong>private</strong> though, as it&rsquo;s something that can only be accessed within the class (i.e. I&rsquo;ll decide when to sleep myself!).</p>

<p>The class method <strong>soul</strong> is <strong>static</strong>, as it can be accessed without making an object instance (i.e. this example works with the assumption that an immortal soul exists).</p>

<h2>I object</h2>

<p>There&rsquo;s little point to make a class unless you want to make objects. Still, let&rsquo;s try the static method:</p>

<blockquote><pre><code>&gt;&gt; cd ..   % We need to be outside the package folder to call it
&gt;&gt; package.superclass.soul()    % 'package.' is only needed if the class is inside a package
</code></pre></blockquote>

<p>Without much ado, let&rsquo;s also make an instance of it:</p>

<blockquote><pre><code>&gt;&gt; Vader = package.superclass('robe', 1, false);
</code></pre></blockquote>

<p>We have created a superclass <strong>object</strong> called <strong>Vader</strong> wearing a robe, having 1 face and no heart. Let&rsquo;s see if he knows programming&hellip;</p>

<blockquote><pre><code>&gt;&gt; Vader.program();
</code></pre></blockquote>

<p>He does! Let&rsquo;s make him sleep&hellip;</p>

<blockquote><pre><code>&gt;&gt; Vader.sleep();
</code></pre></blockquote>

<p>Seems like we can&rsquo;t make him sleep. For our insolence he&rsquo;s likely to do a Jedi choke. Maybe if he has some heart he won&rsquo;t do it though&hellip;</p>

<blockquote><pre><code>&gt;&gt; Vader.heart
</code></pre></blockquote>

<p>&hellip;we will never know!</p>

<h2>The <s>    meek</s>     subclass shall inherit the <s>    earth</s>     superclass</h2>

<p>Now that we have an excellent <em>superclass</em>, we can make a <strong>subclass</strong> that will <strong>inherit</strong> properties and methods from it.</p>

<blockquote><pre><code>&gt;&gt; cd +package
&gt;&gt; edit subclass.m
</code></pre></blockquote>

<p>Since we want to just see what we&rsquo;ve inherited, let&rsquo;s make it simple but add a simple constructor:</p>

<blockquote><pre><code>classdef subclass &lt; superclass
   % SUBCLASS is a subpar class

   properties
   end

   methods
      function obj = superclass(clothes, face, heart)
         if(nargin == 3)
             obj.clothes = clothes;
             obj.face    = face;
             obj.heart   = heart;
         else
             warning('A subclass needs clothes, a face and a heart')
         end
      end
   end
end
</code></pre></blockquote>

<p>Let&rsquo;s see if we can make an instance of it:</p>

<blockquote><pre><code>&gt;&gt; cd ..
&gt;&gt; Luke = package.subclass('robe', 1, true)
</code></pre></blockquote>

<p>Seems like we can&rsquo;t. The <strong>heart</strong> property we&rsquo;d have wished to inherit from <em>superclass</em> is <strong>private</strong> to the superclass. But we can adjust our constructor:</p>

<blockquote><pre><code>[...]
      function obj = superclass(clothes, face, heart)
         if(nargin == 2)
             obj.clothes = clothes;
             obj.face    = face;
         else
            warning('A subclass needs clothes and a face')
         end
      end
[...]
</code></pre></blockquote>

<p>Heartless, I know, but we have little choice. Still, Luke is still able to do some of the things his <s>    father</s>     parent class can do:</p>

<blockquote><pre><code>&gt;&gt; Luke = package.subclass('robe', 1)
&gt;&gt; Luke.program();
&gt;&gt; Luke.sleep();
</code></pre></blockquote>

<p>So, he&rsquo;s still has some programming talent but has some sleepless nights in store, since the <strong>sleep</strong> method from <em>superclass</em> is private. Also, notice that the <em>superclass</em> constructor is called with 0 arguments, in case it needs to do something important. In this case, it just reminds us that Luke is a subclass, since he is heartless.</p>

<h2>Dynamic <s>    duo</s>     dispatch</h2>

<p>Let&rsquo;s power up Luke&rsquo;s programming to make up for his faults. We can add our own <strong>program</strong> method that will override the <em>superclass</em> method.</p>

<blockquote><pre><code>[...]
      function obj = program(obj)
         fprintf('Click, click, click, click\n')
      end
[...]
</code></pre></blockquote>

<p>This should work&hellip;</p>

<blockquote><pre><code>&gt;&gt; Luke = package.subclass('robe', 1)
&gt;&gt; Luke.program();
</code></pre></blockquote>

<p>We can call this differently too:</p>

<blockquote><pre><code>&gt;&gt; program(Luke);
</code></pre></blockquote>

<p>This is the start of <strong>method overloading</strong>, which means that we can make the <em>same</em> method call do different things depending on the object that calls it. We can do the same with matlab functions like <strong>sum()</strong> and <strong>plot()</strong>. But I&rsquo;ll leave that as an exercise to the reader. That is you, youngling Jedi&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Programming Baby-steps]]></title>
    <link href="http://alexvicegrab.github.io/blog/2014/01/14/programming-baby-steps/"/>
    <updated>2014-01-14T02:38:22+01:00</updated>
    <id>http://alexvicegrab.github.io/blog/2014/01/14/programming-baby-steps</id>
    <content type="html"><![CDATA[<h2>My first program</h2>

<p>I knew nothing about programming until I was 21. It&rsquo;s not that I was under-age, and programming was not (yet?) prohibited, fun as it is. It&rsquo;s not that I wasn&rsquo;t a geek, I was: a Natural Sciences student at Cambridge, using a spreadsheet to track my meager expenses, running Debian (and SuSe, and Mandrake, and eventually Ubuntu) Linux on an already old-ish Acer laptop. It&rsquo;s just that somehow I had never though of it as a creative activity.</p>

<p>But the summer of 2006 I had little choice. I had to write a program in (forgive me!) Visual Basic to run a cognitive experiment. My supervisor did exactly what was needed to get me up and running:</p>

<ul>
<li>declare some variables</li>
<li>write an if statement</li>
<li>write a while loop</li>
<li>combine them to do a random bubble sorting</li>
</ul>


<p>5 minutes later he was gone and I was in front of a confusion of lines of code, each shouting for attention. Before too long, I was coding&hellip;</p>

<h2>Vertical learning cliff</h2>

<p>&hellip;the cliffhanger above left you wondering. Did he ever learn anything better than Visual Basic..?</p>

<p>The answer is twofold:</p>

<ol>
<li>No, I learned DirectX first, which is even worse (at least were debugging and documentation is concerned)</li>
<li>Yes, I learned Matlab. Well documented and much easier to debug (but not quite a &ldquo;proper&rdquo; programming language)</li>
</ol>


<p>DirectX took me to designing more visually pretty coloured dots, and then to prettier, if psychedelyc, swirls of cyan and purple.</p>

<p>Matlab taught me modularisation, and DRY (Don&rsquo;t Repeat Yourself) the hard way. I wrote scripts for the (mostly) &ldquo;automatic analysis&rdquo; package for SPM (Statistical Parametric Mapping). This was my first dabbling with XML files, which we used like aluminium, to wrap up analysis modules and build a pipeline scaffold. I picked up a Perl of wisdom or two and some Unreal UDK when working with Virtual Reality (VR) experiments. Finally, I dipped into a bit of R but, tired of pirates, walked the plank.</p>

<h2>The plateau phase</h2>

<p>Years passed as I workd on my PhD and made a few (unsuccessful) attempts to learn Python. Learned bits and pieces about the bash terminal, compiling from source and other Unix affairs. I dabbled in Version Control packages, and switched from Subversion (SVN) to Github.</p>

<p>Eventually, at the start of 2013 I realised I wanted more from life (and coding), so I took upon myself to stop being a mere coder and become a programmer.</p>

<p>Determined to learn the foundations of as many programming languages as I could, I enrolled in <a href="http://www.codecademy.com">Codecademy</a> and finished all the courses there (HTML/CSS, PHP, jQuery, JavaScript, Ruby, Python). Flat and gray knowledge, but a foundation to build more on top.</p>

<h2>High resolution</h2>

<p>One half of my 2014 resolution has been to learn to program in iOS. One Xcode installation and a Lovecraft themed To-Do list app later I feel (almost) ready to make a funky mathematical toy.</p>

<p>This blog is the other half, a way to document this learning process. Importantly, the very creation of this blog had to be uber-geeky. No Blogger, or Wordpress or Movable Type would do. Intead it uses Github Pages, Jekyll and Octopress.</p>

<p>351 days to go&hellip;</p>
]]></content>
  </entry>
  
</feed>
